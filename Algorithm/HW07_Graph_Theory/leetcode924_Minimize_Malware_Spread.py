# 924. Minimize Malware Spread
# https://leetcode.com/problems/minimize-malware-spread/description/


# Runtime: 1852 ms
# Memory Usage: 16.3 MB
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        father = [i for i in range(n)]
        
        def find(node):
            if father[node] == node:
                return node
            root = find(father[node])
            father[node] = root
            return root
        
        for i in range(n-1):
            for j in range(i+1, n):
                if graph[i][j] == 1 and find(i) != find(j):
                    father[find(j)] = find(i)

        
        sz = collections.Counter(find(i) for i in range(n))
        # Now all father[i] is the root of i
        count = collections.Counter(father[i] for i in initial)
        ans = [-1, min(initial)]

        for node in initial:
            if count[father[node]] == 1:
                if sz[father[node]] > ans[0]:
                    ans = [sz[father[node]], node]
                elif sz[father[node]] == ans[0] and node < ans[1]:
                    ans[1] = node
        
        return ans[1]